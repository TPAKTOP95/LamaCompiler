-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
    {} -> c 
    | cur_ins :new_insns ->
      case cur_ins of
      READ -> case readWorld(w) of [n, nw] -> eval([n:st, cst, s, nw],new_insns ) esac 
      | WRITE -> case st of
        n:st -> eval([st, cst, s, writeWorld(n, w)], new_insns)
        esac
      | BINOP (op) -> case st of x:y:tail ->
          eval([evalOp(op, y, x):tail, cst, s, w], new_insns)
        esac
      | LD (x) -> eval([lookup(s, x):st, cst, s, w], new_insns)
      | LDA (xa) -> eval([xa:st, cst, s, w], new_insns)
      | ST (x) -> case st of 
              h:tail -> assign(s, x, h); eval(c, new_insns) 
        esac
      | STI -> 
        case st of x:xa:tail -> 
        assign(s, xa, x); eval([x:tail, cst, s, w], new_insns)
        esac
      
      | CONST (n) -> eval([n:st, cst, s, w], new_insns)
      | LABEL (l) -> eval(c, new_insns)
      | JMP (l) -> eval(c, fromLabel(env, l))
      | CJMP(0, l) -> case st of b:st -> if (b == 0) then eval([st, cst,s, w], fromLabel(env, l))
                                                        else eval([st, cst,s, w], new_insns) fi esac
      | CJMP(1, l) -> case st of b:st -> if (b != 0) then eval([st, cst,s, w], fromLabel(env, l))
                                                        else eval([st, cst,s, w], new_insns) fi esac
      --call beg, end, global, dup, drop
      | DROP -> case st of x:st -> eval([st, cst, s, w], new_insns)
                esac
      | DUP -> case st of x:st -> eval([x:x:st, cst, s, w], new_insns)
                esac
      | GLOBAL (x) -> assign(s, Glb(x), 0); eval(c,new_insns)
      | BEGIN (_, arg_n, loc_n) -> 
        case take(st, arg_n) of
        [st, args] -> case makeState(arg_n ,loc_n) of
                      s -> case foldl(
                        fun (ind, argv){
                          assign(s, Arg(ind), argv);
                          ind +1
                        },
                        0, 
                        args
                      ) of _ -> eval([st, cst, s, w], new_insns)
                        esac
                      esac
        esac
      | END ->
              case cst of 
              {} -> c 
              | olds:cst -> eval([st, cst, olds.fst, w], olds.snd) -- Update args and locals instead of locals, but it works
          esac
      | CALL (fl, arg_n) -> eval([st, [s, new_insns]:cst, s,w], fromLabel(env, fl))

        
        
      | undefined_cmd -> failure("%s is not implemented\n", undefined_cmd.string)
      esac
    esac
    --failure ("SM interpreter is not implemented\n")
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addDefenitions(env, defs){-- -> new env, list of funcs to remember, global defs code
  fun generateGlobalVarsDefsCodeHelper(names){
    case names of 
    {} -> emptyBuffer()
    | n:names -> generateGlobalVarsDefsCodeHelper(names) <+ GLOBAL (n)  
    esac
  }

  fun generateGlobalVarsDefsCode(env, names){
    if isGlobal(env) then
        generateGlobalVarsDefsCodeHelper(names)
    else 
    emptyBuffer()
    fi
  }

  foldl(
    fun ([env, flist, gdcode], def){
    --failure(def.string);
      case def of
      Var (var_names) -> [addVars(env, var_names), flist, gdcode <+> generateGlobalVarsDefsCode(env, var_names)]
      | Fun (f_name, f_args, f_body) -> case genFunLabel(env, f_name) of
        [fLab, env] -> [addFun(env, f_name, fLab, size(f_args)), Fun(fLab ,f_args, f_body):flist, gdcode]
        esac
      esac
    }, 
    [env, {}, emptyBuffer ()], defs
  )
  }

  fun rememberFuncsFromList(env, flist){
    foldl(
      fun (env, Fun(fLabel, args, body)){
        rememberFun(env, fLabel, args, body)
      }, env, flist
    )
  }


  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
        | Assn (e1, e2) ->    case env.genLabels(2) of
    [l1, l2, env] ->      case compile(l1, env, e1) of
    [l1Used,env, code1] -> case compile(l1, env, e2) of
    [l2Used, env, code2] -> [false, env, code1 <+> label(l1, l1Used) <+> code2 <+> label(l2, l2Used) <+ STI] 
    esac
    esac
    esac
    | Seq(e1, e2) -> case env.genLabel of
    [l1, env] -> case compile(l1, env, e1) of
    [l1Used, env, code1] -> case compile(lab, env, e2) of
    [labUsed, env, code2] -> [labUsed, env, code1 <+> label(l1, l1Used) <+> code2]
    esac
    esac
    esac
    | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write(e) -> case env.genLabel of
    [l, env] -> case compile(l, env, e) of
    [lUsed, env, code] -> [false, env, code <+> label(l, lUsed) <+ WRITE]
    esac
    esac
    | If(ce, s1, s2) -> 
    case env.genLabels(2) of
    [eLab, s2Lab, env] -> case compile(eLab, env, ce) of
    [eLabUsed, env, cecode] -> case compile(lab, env, s2) of 
    [_, env, s2code] -> case compile(lab, env, s1) of
    [_,env,s1code] -> [true,env, cecode <+> label(eLab, eLabUsed) <+ CJMP(0, s2Lab) <+>  s1code <+ JMP(lab) <+> label(s2Lab, true) <+> s2code]
    esac 
    esac
    esac
    esac
    | While(ce, se) -> case env.genLabels(2) of
    [eLab, sLab, env] -> case compile(sLab, env, ce) of
    [sLabUsed, env, ecode] -> case compile (eLab, env, se) of
    [_, env, secode] -> [true, env, label(eLab, true) <+> ecode <+>label(sLab, sLabUsed) <+ CJMP(0, lab) <+> secode <+JMP(eLab) ]
    esac
    esac 
    esac
    | DoWhile (se, ce)  ->  case env.genLabels(3) of 
                            [ceLab, seLab, endLab, env] -> 
                            case compile(endLab, env, ce) of
                            [endLabUsed, env, ceCode] -> 
                            case compile(ceLab, env, se) of 
                            [ceLabUsed, env, seCode] -> [true, env, label (seLab, true) <+> seCode <+> label(ceLab, ceLabUsed) <+> ceCode <+> label(endLab, endLabUsed) <+ CJMP(0, lab) <+ JMP(seLab)]
                            esac
                            esac
                            esac
    | Binop (op, e1, e2) -> case env.genLabels(2) of
                            [e1L, e2L, env] -> case compile(e1L, env, e1) of
                            [e1LUsed, env, e1code] -> case compile(e2L, env, e2) of
                            [e2LUsed, env, e2code] -> [false, env, e1code <+> label(e1L, e1LUsed) <+> e2code <+> label(e2L, e2LUsed) <+ BINOP(op)]
                            esac
                            esac
                            esac 
    | Ignore (e) -> case env.genLabel of
                    [eLab, env] -> case compile(eLab, env, e) of
                    [eLabUsed, env, eCode] -> [false, env, eCode <+> label(eLab, eLabUsed) <+ DROP]
                    esac
                    esac
    | Scope (d,e) -> 
    case addDefenitions(beginScope(env), d) of
      [env, flist, gdcode] -> 
      case 
      rememberFuncsFromList(env, flist)of
        env -> 
        case compile(lab, env, e) of
        [lused, env, code] -> [lused, endScope(env), gdcode <+> code]
        esac
      esac
    esac
    | Call (fname, args) ->
    case foldl(fun (code, arg){
      case env.genLabel of [lab, env] ->
                                      case compile(lab, env, arg) of [labUsed, env, argcode] -> 
                                      code <+> argcode <+> label(lab, labUsed)
                                      esac
      esac 
    },
    emptyBuffer(), args) of argcode -> 
              case lookupFun(env, fname) of
                Fun (fname, nargs) -> [false, env, argcode <+ CALL(fname, nargs)]
              esac
    esac
    | _                 ->   failure(stmt.string)--failure ("compileSM not implemented\n")
    esac
    
  }

  fun genFuncCode(env){
    case  env.getFuns of [funs, env] -> 
          foldl( fun(compiledFuns, f@Fun(f_label, f_args, f_body, state)){
            compiledFuns <+>
                      case genLabel(addArgs(beginFun(env, state), f_args)) of
                      [lab, env] -> case compile(lab, env, f_body) of
                      [labUsed, env, f_code] ->
                      emptyBuffer() <+ LABEL (f_label) <+     BEGIN(f_label, size(f_args), getLocals(env))
                                                              <+> f_code
                                                              <+> label(lab, labUsed)
                                                              <+  END 
                      <+> genFuncCode(env)
                      esac
                      esac
          }, emptyBuffer(), funs)
    esac
  }


  case genLabel(initCompEnv()) of
    [mainEndLab, env] ->
      case compile (mainEndLab, env, stmt) of
        [labUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env))
        <+> code  <+> label(mainEndLab, labUsed) <+ END <+> genFuncCode(env)
      esac
  esac
}

